// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using netCoreAPI.Models.TicketAPI;

namespace netCoreAPI.Migrations
{
    [DbContext(typeof(TicketsDBContext))]
    partial class TicketsDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("netCoreAPI.Models.TicketAPI.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("event_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasColumnName("event_name")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("VenueName")
                        .HasColumnName("venue_name")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("EventId");

                    b.HasIndex("VenueName");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("netCoreAPI.Models.TicketAPI.EventSeat", b =>
                {
                    b.Property<int>("EventSeatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("event_seat_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EventId")
                        .HasColumnName("event_id")
                        .HasColumnType("int");

                    b.Property<decimal?>("EventSeatPrice")
                        .HasColumnName("event_seat_price")
                        .HasColumnType("money");

                    b.Property<int>("SeatId")
                        .HasColumnName("seat_id")
                        .HasColumnType("int");

                    b.HasKey("EventSeatId");

                    b.HasIndex("EventId");

                    b.HasIndex("SeatId");

                    b.ToTable("EventSeat");
                });

            modelBuilder.Entity("netCoreAPI.Models.TicketAPI.Row", b =>
                {
                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("row_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RowName")
                        .IsRequired()
                        .HasColumnName("row_name")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int?>("SectionId")
                        .HasColumnName("section_id")
                        .HasColumnType("int");

                    b.HasKey("RowId");

                    b.HasIndex("SectionId");

                    b.ToTable("Row");
                });

            modelBuilder.Entity("netCoreAPI.Models.TicketAPI.Seat", b =>
                {
                    b.Property<int>("SeatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("seat_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Price")
                        .HasColumnName("price")
                        .HasColumnType("money");

                    b.Property<int?>("RowId")
                        .HasColumnName("row_id")
                        .HasColumnType("int");

                    b.HasKey("SeatId");

                    b.HasIndex("RowId");

                    b.ToTable("Seat");
                });

            modelBuilder.Entity("netCoreAPI.Models.TicketAPI.Section", b =>
                {
                    b.Property<int>("SectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("section_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SectionName")
                        .IsRequired()
                        .HasColumnName("section_name")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("VenueName")
                        .HasColumnName("venue_name")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("SectionId");

                    b.HasIndex("VenueName");

                    b.ToTable("Section");
                });

            modelBuilder.Entity("netCoreAPI.Models.TicketAPI.TicketPurchase", b =>
                {
                    b.Property<int>("PurchaseId")
                        .HasColumnName("purchase_id")
                        .HasColumnType("int");

                    b.Property<string>("ConfirmationCode")
                        .HasColumnName("confirmation_code")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<decimal>("PaymentAmount")
                        .HasColumnName("payment_amount")
                        .HasColumnType("money");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnName("payment_method")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("PurchaseId")
                        .HasName("PK__TicketPu__87071CB9297F08D1");

                    b.ToTable("TicketPurchase");
                });

            modelBuilder.Entity("netCoreAPI.Models.TicketAPI.TicketPurchaseSeat", b =>
                {
                    b.Property<int>("EventSeatId")
                        .HasColumnName("event_seat_id")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseId")
                        .HasColumnName("purchase_id")
                        .HasColumnType("int");

                    b.Property<decimal?>("SeatSubtotal")
                        .HasColumnName("seat_subtotal")
                        .HasColumnType("money");

                    b.HasKey("EventSeatId", "PurchaseId")
                        .HasName("PK__TicketPu__B5CCA47E846C3728");

                    b.HasIndex("PurchaseId");

                    b.ToTable("TicketPurchaseSeat");
                });

            modelBuilder.Entity("netCoreAPI.Models.TicketAPI.Venue", b =>
                {
                    b.Property<string>("VenueName")
                        .HasColumnName("venue_name")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int?>("Capacity")
                        .HasColumnName("capacity")
                        .HasColumnType("int");

                    b.HasKey("VenueName")
                        .HasName("PK__Venue__3D6847F267E22EBA");

                    b.ToTable("Venue");
                });

            modelBuilder.Entity("netCoreAPI.Models.TicketAPI.Event", b =>
                {
                    b.HasOne("netCoreAPI.Models.TicketAPI.Venue", "VenueNameNavigation")
                        .WithMany("Event")
                        .HasForeignKey("VenueName")
                        .HasConstraintName("FK__Event__venue_nam__4222D4EF");
                });

            modelBuilder.Entity("netCoreAPI.Models.TicketAPI.EventSeat", b =>
                {
                    b.HasOne("netCoreAPI.Models.TicketAPI.Event", "Event")
                        .WithMany("EventSeat")
                        .HasForeignKey("EventId")
                        .HasConstraintName("FK__EventSeat__event__45F365D3")
                        .IsRequired();

                    b.HasOne("netCoreAPI.Models.TicketAPI.Seat", "Seat")
                        .WithMany("EventSeat")
                        .HasForeignKey("SeatId")
                        .HasConstraintName("FK__EventSeat__seat___44FF419A")
                        .IsRequired();
                });

            modelBuilder.Entity("netCoreAPI.Models.TicketAPI.Row", b =>
                {
                    b.HasOne("netCoreAPI.Models.TicketAPI.Section", "Section")
                        .WithMany("Row")
                        .HasForeignKey("SectionId")
                        .HasConstraintName("FK__Row__section_id__3C69FB99");
                });

            modelBuilder.Entity("netCoreAPI.Models.TicketAPI.Seat", b =>
                {
                    b.HasOne("netCoreAPI.Models.TicketAPI.Row", "Row")
                        .WithMany("Seat")
                        .HasForeignKey("RowId")
                        .HasConstraintName("FK__Seat__row_id__3F466844");
                });

            modelBuilder.Entity("netCoreAPI.Models.TicketAPI.Section", b =>
                {
                    b.HasOne("netCoreAPI.Models.TicketAPI.Venue", "VenueNameNavigation")
                        .WithMany("Section")
                        .HasForeignKey("VenueName")
                        .HasConstraintName("FK__Section__venue_n__398D8EEE");
                });

            modelBuilder.Entity("netCoreAPI.Models.TicketAPI.TicketPurchaseSeat", b =>
                {
                    b.HasOne("netCoreAPI.Models.TicketAPI.EventSeat", "EventSeat")
                        .WithMany("TicketPurchaseSeat")
                        .HasForeignKey("EventSeatId")
                        .HasConstraintName("FK__TicketPur__event__4AB81AF0")
                        .IsRequired();

                    b.HasOne("netCoreAPI.Models.TicketAPI.TicketPurchase", "Purchase")
                        .WithMany("TicketPurchaseSeat")
                        .HasForeignKey("PurchaseId")
                        .HasConstraintName("FK__TicketPur__purch__49C3F6B7")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
